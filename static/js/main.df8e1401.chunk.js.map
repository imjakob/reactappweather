{"version":3,"sources":["actions/index.js","reducer/index.js","store.js","components/Corner/index.js","components/Input/index.js","components/Loader/index.js","components/Swiper/index.js","components/ForecastContents/index.js","App.js","serviceWorker.js","index.js"],"names":["fetchForecastsError","error","type","initialState","pending","forecasts","store","createStore","state","action","applyMiddleware","thunk","Corner","href","className","aria-label","width","height","viewBox","style","fill","color","position","top","border","right","aria-hidden","d","transformOrigin","Input","props","onSubmit","e","preventDefault","location","fetchForecasts","onChange","value","target","setState","this","placeholder","disabled","length","Component","connect","dispatch","fetch","then","res","json","data","catch","Loader","Swiper","current","map","prop","key","uuidv1","apparentTemperatureHigh","apparentTemperatureLow","temperature","summary","uvIndex","windSpeed","windGust","humidity","dewPoint","visibility","cloudCover","pressure","ForecastContents","handleRender","fetching","onClick","name","forecast","currently","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.df8e1401.chunk.js","sourcesContent":["export const FETCHING_FORECASTS = \"FETCHING_FORECASTS\";\r\nexport const FETCH_FORECASTS_SUCCESS = \"FETCH_FORECASTS_SUCCESS\";\r\nexport const FETCH_FORECASTS_ERROR = \"FETCH_FORECASTS_ERROR\";\r\n\r\nfunction fetchingForecasts() {\r\n  return {\r\n    type: FETCHING_FORECASTS\r\n  };\r\n}\r\n\r\nfunction fetchForecastsSuccess(forecasts) {\r\n  return {\r\n    type: FETCH_FORECASTS_SUCCESS,\r\n    forecasts\r\n  };\r\n}\r\n\r\nfunction fetchForecastsError(error) {\r\n  return {\r\n    type: FETCH_FORECASTS_ERROR,\r\n    error\r\n  };\r\n}\r\n\r\nexport const fetchForecasts = location => dispatch => {\r\n  dispatch(fetchingForecasts());\r\n  fetch(\r\n    `https://jakobweather.herokuapp.com/jakobweather-dev?address=${location}`\r\n  )\r\n    .then(res => {\r\n      res.json().then(data => {\r\n        if (data.error) {\r\n          return dispatch(fetchForecastsError(data.error));\r\n        }\r\n\r\n        return dispatch(fetchForecastsSuccess(data));\r\n      });\r\n    })\r\n    .catch(() =>\r\n      dispatch(fetchForecastsError(\"Unable To Connect To Weather Service!\"))\r\n    );\r\n};\r\n","import {\r\n  FETCHING_FORECASTS,\r\n  FETCH_FORECASTS_SUCCESS,\r\n  FETCH_FORECASTS_ERROR\r\n} from \"../actions\";\r\n\r\nconst initialState = {\r\n  pending: false,\r\n  forecasts: null,\r\n  error: null\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCHING_FORECASTS:\r\n      return {\r\n        ...state,\r\n        pending: true\r\n      };\r\n\r\n    case FETCH_FORECASTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        pending: false,\r\n        forecasts: action.forecasts\r\n      };\r\n\r\n    case FETCH_FORECASTS_ERROR:\r\n      return {\r\n        ...state,\r\n        pending: false,\r\n        forecasts: null,\r\n        error: action.error\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducer\";\r\n\r\nconst initialState = {};\r\n\r\nconst store = createStore(rootReducer, initialState, applyMiddleware(thunk));\r\n\r\nexport default store;\r\n","import React from \"react\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nfunction Corner() {\r\n  return (\r\n    <a\r\n      href=\"https://github.com/imjakob/reactappweather\"\r\n      className=\"github-corner\"\r\n      aria-label=\"View source on Github\"\r\n    >\r\n      <svg\r\n        width=\"60\"\r\n        height=\"60\"\r\n        viewBox=\"0 0 250 250\"\r\n        style={{\r\n          fill: \"#151513\",\r\n          color: \"#fff\",\r\n          position: \"absolute\",\r\n          top: 0,\r\n          border: 0,\r\n          right: 0\r\n        }}\r\n        aria-hidden=\"true\"\r\n      >\r\n        <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"></path>\r\n        <path\r\n          d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"\r\n          fill=\"currentColor\"\r\n          style={{ transformOrigin: \"130px 106px\" }}\r\n          className=\"octo-arm\"\r\n        ></path>\r\n        <path\r\n          d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"\r\n          fill=\"currentColor\"\r\n          className=\"octo-body\"\r\n        ></path>\r\n      </svg>\r\n    </a>\r\n  );\r\n}\r\n\r\nexport default Corner;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { fetchForecasts } from \"../../actions\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nclass Input extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      location: \"\"\r\n    };\r\n  }\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    const { location } = this.state;\r\n\r\n    this.props.fetchForecasts(location);\r\n  };\r\n\r\n  onChange = e => {\r\n    const { value } = e.target;\r\n\r\n    this.setState({\r\n      location: value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { location } = this.state;\r\n\r\n    return (\r\n      <div className=\"input-section\">\r\n        <form onSubmit={this.onSubmit}>\r\n          <input placeholder=\"Location\" onChange={this.onChange} />\r\n          <button type=\"submit\" disabled={location.length === 0}>\r\n            Search\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nInput.propTypes = {\r\n  fetchForecasts: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(\r\n  null,\r\n  { fetchForecasts }\r\n)(Input);\r\n","import React from \"react\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nfunction Loader() {\r\n  return <div className=\"loader\">Loading...</div>;\r\n}\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\n\r\nimport { v1 as uuidv1 } from \"uuid\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nfunction Swiper({ forecasts, current }) {\r\n  return (\r\n    <div className=\"slider\">\r\n      <div className=\"slides\">\r\n        {forecasts[current].data.map((prop) => (\r\n          <div key={uuidv1()}>\r\n            <section className=\"first-view\">\r\n              {current === \"daily\" ? (\r\n                <p>\r\n                  {prop.apparentTemperatureHigh} / {prop.apparentTemperatureLow}{\" \"}\r\n                  °C\r\n                </p>\r\n              ) : (\r\n                <p>{prop.temperature} °C</p>\r\n              )}\r\n\r\n              <p>{prop.summary}</p>\r\n            </section>\r\n            <section className=\"detail\">\r\n              <p>\r\n                UV Index: <span>{prop.uvIndex}</span>\r\n              </p>\r\n              <p>\r\n                Wind: <span>{prop.windSpeed} km/h</span>\r\n              </p>\r\n              <p>\r\n                Gusts: <span>{prop.windGust} km/h</span>\r\n              </p>\r\n              <p>\r\n                Humidity: <span>{prop.humidity} %</span>\r\n              </p>\r\n              <p>\r\n                Dew Point: <span>{prop.dewPoint} °C</span>\r\n              </p>\r\n              <p>\r\n                Visibility: <span>{prop.visibility} km</span>\r\n              </p>\r\n              <p>\r\n                Cloud Cover: <span>{prop.cloudCover} %</span>\r\n              </p>\r\n              <p>\r\n                Pressure: <span>{prop.pressure} mbar</span>\r\n              </p>\r\n            </section>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Swiper;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Loader from \"../Loader\";\r\nimport Swiper from \"../Swiper\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nclass ForecastContents extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      current: \"now\",\r\n      fetching: false,\r\n      forecasts: null,\r\n      error: null,\r\n    };\r\n  }\r\n\r\n  static getDerivedStateFromProps({ fetching, forecasts, error }) {\r\n    return {\r\n      fetching,\r\n      forecasts,\r\n      error,\r\n    };\r\n  }\r\n\r\n  handleRender = () => {\r\n    const { current, fetching, forecasts, error } = this.state;\r\n\r\n    if (fetching) {\r\n      return <Loader />;\r\n    } else if (forecasts) {\r\n      return (\r\n        <>\r\n          <h2 className=\"location\">{forecasts.location}</h2>\r\n          <section className=\"section-buttons\">\r\n            <button\r\n              onClick={() =>\r\n                this.setState({\r\n                  current: \"now\",\r\n                })\r\n              }\r\n              name=\"now\"\r\n              className={current === \"now\" ? \"active\" : \"inactive\"}\r\n              type=\"button\"\r\n            >\r\n              now\r\n            </button>\r\n\r\n            <button\r\n              onClick={() =>\r\n                this.setState({\r\n                  current: \"hourly\",\r\n                })\r\n              }\r\n              name=\"hourly\"\r\n              className={current === \"hourly\" ? \"active\" : \"inactive\"}\r\n              type=\"button\"\r\n            >\r\n              hourly\r\n            </button>\r\n\r\n            <button\r\n              onClick={() =>\r\n                this.setState({\r\n                  current: \"daily\",\r\n                })\r\n              }\r\n              name=\"daily\"\r\n              className={current === \"daily\" ? \"active\" : \"inactive\"}\r\n              type=\"button\"\r\n            >\r\n              daily\r\n            </button>\r\n          </section>\r\n\r\n          {current === \"now\" && (\r\n            <div className=\"forecast-currently\">\r\n              <section className=\"first-view\">\r\n                <p>{forecasts.forecast.currently.temperature} °C </p>\r\n                <p>{forecasts.forecast.currently.summary}</p>\r\n              </section>\r\n\r\n              <section className=\"detail\">\r\n                <p>\r\n                  UV Index: <span>{forecasts.forecast.currently.uvIndex}</span>\r\n                </p>\r\n                <p>\r\n                  Wind:{\" \"}\r\n                  <span>{forecasts.forecast.currently.windSpeed} km/h</span>\r\n                </p>\r\n                <p>\r\n                  Gusts:{\" \"}\r\n                  <span>{forecasts.forecast.currently.windGust} km/h</span>\r\n                </p>\r\n                <p>\r\n                  Humidity:{\" \"}\r\n                  <span>{forecasts.forecast.currently.humidity} %</span>\r\n                </p>\r\n                <p>\r\n                  Dew Point:{\" \"}\r\n                  <span>{forecasts.forecast.currently.dewPoint} °C</span>\r\n                </p>\r\n                <p>\r\n                  Visibility:{\" \"}\r\n                  <span>{forecasts.forecast.currently.visibility} km</span>\r\n                </p>\r\n                <p>\r\n                  Cloud Cover:{\" \"}\r\n                  <span>{forecasts.forecast.currently.cloudCover} %</span>\r\n                </p>\r\n                <p>\r\n                  Pressure:{\" \"}\r\n                  <span>{forecasts.forecast.currently.pressure} mbar</span>\r\n                </p>\r\n              </section>\r\n            </div>\r\n          )}\r\n\r\n          {current === \"hourly\" && (\r\n            <div>\r\n              <Swiper forecasts={forecasts.forecast} current={current} />\r\n            </div>\r\n          )}\r\n\r\n          {current === \"daily\" && (\r\n            <div>\r\n              <Swiper forecasts={forecasts.forecast} current={current} />\r\n            </div>\r\n          )}\r\n        </>\r\n      );\r\n    } else if (error) {\r\n      return error;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"section-forecasts-content\">{this.handleRender()}</div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  fetching: state.pending,\r\n  forecasts: state.forecasts,\r\n  error: state.error,\r\n});\r\n\r\nexport default connect(mapStateToProps)(ForecastContents);\r\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport store from \"./store\";\r\nimport Corner from \"./components/Corner\";\r\nimport Input from \"./components/Input\";\r\nimport ForecastContents from \"./components/ForecastContents\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"App\">\r\n        <Corner />\r\n        <Input />\r\n        <ForecastContents />\r\n        <p>\r\n          Created by Marc Erwin <br />\r\n          a.k.a Trí Nghĩa\r\n        </p>\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}