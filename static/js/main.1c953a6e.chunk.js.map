{"version":3,"sources":["actions/index.js","reducer/index.js","store.js","components/Corner/index.js","components/Input/index.js","components/Loader/index.js","components/ForecastContents/swiper.js","components/ForecastContents/index.js","App.js","serviceWorker.js","index.js"],"names":["initialState","pending","forecasts","error","store","createStore","state","action","type","applyMiddleware","thunk","Corner","href","className","aria-label","width","height","viewBox","style","fill","color","position","top","border","right","aria-hidden","d","transformOrigin","Input","props","onSubmit","e","preventDefault","location","fetchForecasts","onChange","value","target","setState","this","placeholder","disabled","length","Component","connect","dispatch","fetch","then","res","json","fetchForecastsSuccess","catch","fetchForecastsError","Loader","Swiper","ForecastContents","demo","fetching","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.1c953a6e.chunk.js","sourcesContent":["export const FETCHING_FORECASTS = \"FETCHING_FORECASTS\";\nexport const FETCH_FORECASTS_SUCCESS = \"FETCH_FORECASTS_SUCCESS\";\nexport const FETCH_FORECASTS_ERROR = \"FETCH_FORECASTS_ERROR\";\n\nfunction fetchingForecasts() {\n  return {\n    type: FETCHING_FORECASTS\n  };\n}\n\nfunction fetchForecastsSuccess(forecasts) {\n  return {\n    type: FETCH_FORECASTS_SUCCESS,\n    forecasts\n  };\n}\n\nfunction fetchForecastsError(error) {\n  return {\n    type: FETCH_FORECASTS_ERROR,\n    error\n  };\n}\n\nexport const fetchForecasts = location => dispatch => {\n  dispatch(fetchingForecasts());\n  fetch(\n    `https://jakobweather.herokuapp.com/jakobweather-dev?address=${location}`\n  )\n    .then(res => res.json())\n    .then(forecasts => dispatch(fetchForecastsSuccess(forecasts)))\n    .catch(error => {\n      dispatch(fetchForecastsError(error));\n    });\n};\n","import {\n  FETCHING_FORECASTS,\n  FETCH_FORECASTS_SUCCESS,\n  FETCH_FORECASTS_ERROR\n} from \"../actions\";\n\nconst initialState = {\n  pending: false,\n  forecasts: [],\n  error: null\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case FETCHING_FORECASTS:\n      return {\n        ...state,\n        pending: true\n      };\n\n    case FETCH_FORECASTS_SUCCESS:\n      return {\n        ...state,\n        pending: false,\n        forecasts: action.forecasts\n      };\n\n    case FETCH_FORECASTS_ERROR:\n      return {\n        ...state,\n        error: action.error\n      };\n\n    default:\n      return state;\n  }\n}\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducer\";\n\nconst initialState = {};\n\nconst store = createStore(rootReducer, initialState, applyMiddleware(thunk));\n\nexport default store;\n","import React from \"react\";\n\nimport \"./styles.scss\";\n\nfunction Corner() {\n  return (\n    <a\n      href=\"https://github.com/imjakob/reactappweather\"\n      className=\"github-corner\"\n      aria-label=\"View source on Github\"\n    >\n      <svg\n        width=\"60\"\n        height=\"60\"\n        viewBox=\"0 0 250 250\"\n        style={{\n          fill: \"#151513\",\n          color: \"#fff\",\n          position: \"absolute\",\n          top: 0,\n          border: 0,\n          right: 0\n        }}\n        aria-hidden=\"true\"\n      >\n        <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"></path>\n        <path\n          d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"\n          fill=\"currentColor\"\n          style={{ transformOrigin: \"130px 106px\" }}\n          className=\"octo-arm\"\n        ></path>\n        <path\n          d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"\n          fill=\"currentColor\"\n          className=\"octo-body\"\n        ></path>\n      </svg>\n    </a>\n  );\n}\n\nexport default Corner;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport { fetchForecasts } from \"../../actions\";\n\nimport \"./styles.scss\";\n\nclass Input extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      location: \"\"\n    };\n  }\n\n  onSubmit = e => {\n    e.preventDefault();\n    const { location } = this.state;\n\n    this.props.fetchForecasts(location);\n  };\n\n  onChange = e => {\n    const { value } = e.target;\n\n    this.setState({\n      location: value\n    });\n  };\n\n  render() {\n    const { location } = this.state;\n\n    return (\n      <div className=\"input-section\">\n        <form onSubmit={this.onSubmit}>\n          <input placeholder=\"Location\" onChange={this.onChange} />\n          <button type=\"submit\" disabled={location.length === 0}>\n            Search\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { fetchForecasts }\n)(Input);\n","import React from \"react\";\n\nimport \"./styles.scss\";\n\nfunction Loader() {\n  return <div className=\"loader\">Loading...</div>;\n}\n\nexport default Loader;\n","import React from \"react\";\n\nimport \"./swiper.styles.scss\";\n\nfunction Swiper() {\n  return (\n    <div className=\"slider\">\n      <div className=\"slides\">\n        <div>1</div>\n        <div>2</div>\n        <div>3</div>\n        <div>4</div>\n        <div>5</div>\n        <div>6</div>\n        <div>7</div>\n        <div>8</div>\n        <div>9</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Swiper;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Loader from \"../Loader\";\nimport Swiper from \"./swiper\";\n\nimport \"./styles.scss\";\n\nclass ForecastContents extends Component {\n  demo = () => {\n    const { fetching, forecasts, error } = this.props;\n\n    if (fetching) {\n      return <Loader />;\n    } else if (forecasts) {\n      return <>{forecasts.location}</>;\n    } else if (error) {\n      return <>Double Check!</>;\n    }\n  };\n\n  render() {\n    return <div>{this.demo()}</div>;\n  }\n}\n\nconst mapStateToProps = state => ({\n  fetching: state.pending,\n  forecasts: state.forecasts,\n  error: state.error\n});\n\nexport default connect(mapStateToProps)(ForecastContents);\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\n\nimport store from \"./store\";\nimport Corner from \"./components/Corner\";\nimport Input from \"./components/Input\";\nimport ForecastContents from \"./components/ForecastContents\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Corner />\n        <Input />\n        <ForecastContents />\n        <p>Created by Jakob Mathieu</p>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}