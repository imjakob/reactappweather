{"version":3,"sources":["actions/index.js","reducer/index.js","store.js","components/Corner/index.js","components/Input/index.js","components/Loader/index.js","components/Swiper/index.js","components/ForecastContents/index.js","App.js","serviceWorker.js","index.js"],"names":["fetchForecastsError","error","type","initialState","pending","forecasts","store","createStore","state","action","applyMiddleware","thunk","Corner","href","className","aria-label","width","height","viewBox","style","fill","color","position","top","border","right","aria-hidden","d","transformOrigin","Input","props","onSubmit","location","fetchForecasts","onChange","e","value","target","setState","this","layout","onFinish","Item","placeholder","size","htmlType","disabled","length","Component","connect","dispatch","fetch","then","res","json","data","catch","Loader","Swiper","current","map","prop","key","uuidv1","apparentTemperatureHigh","apparentTemperatureLow","temperature","summary","uvIndex","windSpeed","windGust","humidity","dewPoint","visibility","cloudCover","pressure","ForecastContents","handleRender","fetching","onClick","name","forecast","currently","App","justify","span","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.98d03e63.chunk.js","sourcesContent":["export const FETCHING_FORECASTS = \"FETCHING_FORECASTS\";\nexport const FETCH_FORECASTS_SUCCESS = \"FETCH_FORECASTS_SUCCESS\";\nexport const FETCH_FORECASTS_ERROR = \"FETCH_FORECASTS_ERROR\";\n\nfunction fetchingForecasts() {\n  return {\n    type: FETCHING_FORECASTS\n  };\n}\n\nfunction fetchForecastsSuccess(forecasts) {\n  return {\n    type: FETCH_FORECASTS_SUCCESS,\n    forecasts\n  };\n}\n\nfunction fetchForecastsError(error) {\n  return {\n    type: FETCH_FORECASTS_ERROR,\n    error\n  };\n}\n\nexport const fetchForecasts = location => dispatch => {\n  dispatch(fetchingForecasts());\n  fetch(\n    `https://jakobweather.herokuapp.com/jakobweather-dev?address=${location}`\n  )\n    .then(res => {\n      res.json().then(data => {\n        if (data.error) {\n          return dispatch(fetchForecastsError(data.error));\n        }\n\n        return dispatch(fetchForecastsSuccess(data));\n      });\n    })\n    .catch(() =>\n      dispatch(fetchForecastsError(\"Unable To Connect To Weather Service!\"))\n    );\n};\n","import {\n  FETCHING_FORECASTS,\n  FETCH_FORECASTS_SUCCESS,\n  FETCH_FORECASTS_ERROR\n} from \"../actions\";\n\nconst initialState = {\n  pending: false,\n  forecasts: null,\n  error: null\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case FETCHING_FORECASTS:\n      return {\n        ...state,\n        pending: true\n      };\n\n    case FETCH_FORECASTS_SUCCESS:\n      return {\n        ...state,\n        pending: false,\n        forecasts: action.forecasts\n      };\n\n    case FETCH_FORECASTS_ERROR:\n      return {\n        ...state,\n        pending: false,\n        forecasts: null,\n        error: action.error\n      };\n\n    default:\n      return state;\n  }\n}\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducer\";\n\nconst initialState = {};\n\nconst store = createStore(rootReducer, initialState, applyMiddleware(thunk));\n\nexport default store;\n","import React from \"react\";\n\nimport \"./styles.scss\";\n\nfunction Corner() {\n  return (\n    <a\n      href=\"https://github.com/imjakob/reactappweather\"\n      className=\"github-corner\"\n      aria-label=\"View source on Github\"\n    >\n      <svg\n        width=\"60\"\n        height=\"60\"\n        viewBox=\"0 0 250 250\"\n        style={{\n          fill: \"#151513\",\n          color: \"#fff\",\n          position: \"absolute\",\n          top: 0,\n          border: 0,\n          right: 0\n        }}\n        aria-hidden=\"true\"\n      >\n        <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"></path>\n        <path\n          d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"\n          fill=\"currentColor\"\n          style={{ transformOrigin: \"130px 106px\" }}\n          className=\"octo-arm\"\n        ></path>\n        <path\n          d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"\n          fill=\"currentColor\"\n          className=\"octo-body\"\n        ></path>\n      </svg>\n    </a>\n  );\n}\n\nexport default Corner;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Form, Input as AntInput, Button } from \"antd\";\n\nimport { fetchForecasts } from \"../../actions\";\n\nimport \"./styles.scss\";\n\nclass Input extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      location: \"\",\n    };\n  }\n\n  onSubmit = () => {\n    const { location } = this.state;\n\n    this.props.fetchForecasts(location);\n  };\n\n  onChange = (e) => {\n    const { value } = e.target;\n\n    this.setState({\n      location: value,\n    });\n  };\n\n  render() {\n    const { location } = this.state;\n\n    return (\n      <div className=\"input-section\">\n        <Form layout=\"inline\" onFinish={this.onSubmit}>\n          <Form.Item>\n            <AntInput\n              onChange={this.onChange}\n              placeholder=\"Location\"\n              size=\"large\"\n            />\n          </Form.Item>\n\n          <Form.Item>\n            <Button\n              htmlType=\"submit\"\n              type=\"primary\"\n              size=\"large\"\n              disabled={location.length === 0}\n            >\n              Search\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    );\n  }\n}\n\nInput.propTypes = {\n  fetchForecasts: PropTypes.func.isRequired,\n};\n\nexport default connect(null, { fetchForecasts })(Input);\n","import React from \"react\";\n\nimport \"./styles.scss\";\n\nfunction Loader() {\n  return <div className=\"loader\">Loading...</div>;\n}\n\nexport default Loader;\n","import React from \"react\";\n\nimport { v1 as uuidv1 } from \"uuid\";\n\nimport \"./styles.scss\";\n\nfunction Swiper({ forecasts, current }) {\n  return (\n    <div className=\"slider\">\n      <div className=\"slides\">\n        {forecasts[current].data.map((prop) => (\n          <div key={uuidv1()}>\n            <section className=\"first-view\">\n              {current === \"daily\" ? (\n                <p>\n                  {prop.apparentTemperatureHigh} / {prop.apparentTemperatureLow}{\" \"}\n                  °C\n                </p>\n              ) : (\n                <p>{prop.temperature} °C</p>\n              )}\n\n              <p>{prop.summary}</p>\n            </section>\n            <section className=\"detail\">\n              <p>\n                UV Index: <span>{prop.uvIndex}</span>\n              </p>\n              <p>\n                Wind: <span>{prop.windSpeed} km/h</span>\n              </p>\n              <p>\n                Gusts: <span>{prop.windGust} km/h</span>\n              </p>\n              <p>\n                Humidity: <span>{prop.humidity} %</span>\n              </p>\n              <p>\n                Dew Point: <span>{prop.dewPoint} °C</span>\n              </p>\n              <p>\n                Visibility: <span>{prop.visibility} km</span>\n              </p>\n              <p>\n                Cloud Cover: <span>{prop.cloudCover} %</span>\n              </p>\n              <p>\n                Pressure: <span>{prop.pressure} mbar</span>\n              </p>\n            </section>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Swiper;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Spin } from \"antd\";\n\nimport Loader from \"../Loader\";\nimport Swiper from \"../Swiper\";\n\nimport \"./styles.scss\";\n\nclass ForecastContents extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      current: \"now\",\n      fetching: false,\n      forecasts: null,\n      error: null,\n    };\n  }\n\n  static getDerivedStateFromProps({ fetching, forecasts, error }) {\n    return {\n      fetching,\n      forecasts,\n      error,\n    };\n  }\n\n  handleRender = () => {\n    const { current, fetching, forecasts, error } = this.state;\n\n    if (fetching) {\n      return <Spin size=\"large\" />;\n    } else if (forecasts) {\n      return (\n        <>\n          <h2 className=\"location\">{forecasts.location}</h2>\n          <section className=\"section-buttons\">\n            <button\n              onClick={() =>\n                this.setState({\n                  current: \"now\",\n                })\n              }\n              name=\"now\"\n              className={current === \"now\" ? \"active\" : \"inactive\"}\n              type=\"button\"\n            >\n              now\n            </button>\n\n            <button\n              onClick={() =>\n                this.setState({\n                  current: \"hourly\",\n                })\n              }\n              name=\"hourly\"\n              className={current === \"hourly\" ? \"active\" : \"inactive\"}\n              type=\"button\"\n            >\n              hourly\n            </button>\n\n            <button\n              onClick={() =>\n                this.setState({\n                  current: \"daily\",\n                })\n              }\n              name=\"daily\"\n              className={current === \"daily\" ? \"active\" : \"inactive\"}\n              type=\"button\"\n            >\n              daily\n            </button>\n          </section>\n\n          {current === \"now\" && (\n            <div className=\"forecast-currently\">\n              <section className=\"first-view\">\n                <p>{forecasts.forecast.currently.temperature} °C </p>\n                <p>{forecasts.forecast.currently.summary}</p>\n              </section>\n\n              <section className=\"detail\">\n                <p>\n                  UV Index: <span>{forecasts.forecast.currently.uvIndex}</span>\n                </p>\n                <p>\n                  Wind:{\" \"}\n                  <span>{forecasts.forecast.currently.windSpeed} km/h</span>\n                </p>\n                <p>\n                  Gusts:{\" \"}\n                  <span>{forecasts.forecast.currently.windGust} km/h</span>\n                </p>\n                <p>\n                  Humidity:{\" \"}\n                  <span>{forecasts.forecast.currently.humidity} %</span>\n                </p>\n                <p>\n                  Dew Point:{\" \"}\n                  <span>{forecasts.forecast.currently.dewPoint} °C</span>\n                </p>\n                <p>\n                  Visibility:{\" \"}\n                  <span>{forecasts.forecast.currently.visibility} km</span>\n                </p>\n                <p>\n                  Cloud Cover:{\" \"}\n                  <span>{forecasts.forecast.currently.cloudCover} %</span>\n                </p>\n                <p>\n                  Pressure:{\" \"}\n                  <span>{forecasts.forecast.currently.pressure} mbar</span>\n                </p>\n              </section>\n            </div>\n          )}\n\n          {current === \"hourly\" && (\n            <div>\n              <Swiper forecasts={forecasts.forecast} current={current} />\n            </div>\n          )}\n\n          {current === \"daily\" && (\n            <div>\n              <Swiper forecasts={forecasts.forecast} current={current} />\n            </div>\n          )}\n        </>\n      );\n    } else if (error) {\n      return error;\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"section-forecasts-content\">{this.handleRender()}</div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  fetching: state.pending,\n  forecasts: state.forecasts,\n  error: state.error,\n});\n\nexport default connect(mapStateToProps)(ForecastContents);\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { Row, Col } from \"antd\";\n\nimport store from \"./store\";\nimport Corner from \"./components/Corner\";\nimport Input from \"./components/Input\";\nimport ForecastContents from \"./components/ForecastContents\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Row justify=\"center\">\n          <Corner />\n\n          <Col span=\"18\">\n            <Input />\n            <ForecastContents />\n            <p>\n              Created by Marc Erwin <br />\n              a.k.a Trí Nghĩa\n            </p>\n          </Col>\n        </Row>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}